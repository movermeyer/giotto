#!/usr/bin/env python

import sys
import stat
import subprocess
import os

subcommand = sys.argv[1]

if subcommand == 'suggest':
    try:
        sys.path.append(os.getcwd())
        from giotto import initialize
        import config
        initialize(config)
        from manifest import manifest
        if len(sys.argv) > 2:
            item = sys.argv[2]
        else:
            item = ''

        suggestions = manifest.get_suggestion(item)
        print " ".join(suggestions)
    except:
        pass    

    raise SystemExit()

if subcommand == 'create':
    controllers = sys.argv[2:]
    config_template = '''import os
from giotto.utils import better_base

Base = better_base()

project_path = os.path.dirname(os.path.abspath(__file__))
jinja2_template_dir = 'html'
auth_session_expire = 3600 * 24 * 7
error_template = None'''

    machine_template = """# Put settings in this file that will change depending on the
# machine, such as database hosts and external resource paths.
# One of these files exist for each enviornment this app will run in.

debug = True
cache_engine = 'dummy' # or 'redis', 'locmem', 'database'
cache_host = 'localhost'

auth_engine = 'database' # or a `keyvalue` object.

db_engine = 'sqlite3'
db_name = 'sqlite.db'

#db_engine = 'postgresql' # or 'mysql'
#db_name = 'my_project'
#db_port = 5434
#db_host = 'localhost'
#db_username = 'postgres'
#db_password = 'password'
"""

    template_controller = '''\
#!/usr/bin/env python
# coding: utf-8

import argparse
import sys
from giotto import initialize

try:
    import secrets
except ImportError:
    secrets = None
    print("Warning: no secrets.py found.")

try:
    import machine
except ImportError:
    machine = None
    print("Warning: no machine.py found.")

import config
initialize(config, secrets, machine)

from manifest import manifest
'''

    blank_application = '''from giotto.programs import Program, Manifest
from giotto.programs.management import management_manifest
from giotto.views import BasicView

manifest = Manifest({
    '': Program(
        model=[lambda: "Welcome to Giotto!"],
        view=BasicView
    ),
    'mgt': management_manifest,
})'''

    from giotto.demo import demo_application

    try:
        open('manifest.py', 'r')
    except IOError:
        # create a blank manifest file (if one doesn't already exist)
        f = open('manifest.py', 'w')
        if '--demo' in controllers:
            f.write(demo_application)
        else:
            f.write(blank_application)

    try:
        open('machine.py', 'r')
    except IOError:
        # create a blank config file (if one doesn't already exist)
        f = open('machine.py', 'w')
        f.write(machine_template)

    try:
        open('secrets.py', 'r')
    except IOError:
        # create a blank config file (if one doesn't already exist)
        f = open('secrets.py', 'w')
        f.write("""# Put settings in this file that are secret (such as API keys).
# Remember to exclude this file from source control.""")

    try:
        open('config.py', 'r')
    except IOError:
        # create a blank config file (if one doesn't already exist)
        f = open('config.py', 'w')
        f.write(config_template)

    for controller in controllers:
        if controller == 'http':
            from giotto.controllers.http import http_execution_snippet
            filename = 'http_controller.py'
            f = open(filename, 'w')
            st = os.stat(filename)
            f.write(template_controller + http_execution_snippet)
            os.chmod(filename, st.st_mode | stat.S_IEXEC)

        if controller == 'irc':
            from giotto.controllers.irc_ import irc_execution_snippet
            filename = 'irc_controller.py'
            f = open(filename, 'w')
            f.write(template_controller + irc_execution_snippet)
            st = os.stat(filename)
            os.chmod(filename, st.st_mode | stat.S_IEXEC)

        if controller == 'cmd':
            from giotto.controllers.cmd import cmd_execution_snippet
            filename = 'cmd_controller.py'
            f = open(filename, 'w')
            f.write(template_controller + cmd_execution_snippet)
            st = os.stat(filename)
            os.chmod(filename, st.st_mode | stat.S_IEXEC)

    raise SystemExit()

command = ["python"] + ["%s_controller.py" % subcommand] + sys.argv[2:]
process = subprocess.Popen(command)
try:
    process.wait()
except KeyboardInterrupt:
    pass




