#!/usr/bin/env python

import sys
import stat
import subprocess
import os

subcommand = sys.argv[1]

if subcommand == 'suggest':
    sys.path.append(os.getcwd())
    from giotto import initialize
    import config
    initialize(config)
    from manifest import manifest
    suggestions = manifest.get_suggestion(sys.argv[2])
    print " ".join(suggestions)
    raise SystemExit()

if subcommand == 'create':
    controller = sys.argv[2]

    config_template = '''import os
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    from giotto.utils import better_base

    Base = better_base()

    from sqlite3 import dbapi2 as sqlite
    engine = create_engine('sqlite+pysqlite:///file.db', module=sqlite)

    session = sessionmaker(bind=engine)()
    cache = None
    auth_session = None

    project_path = os.path.dirname(os.path.abspath(__file__))

    from jinja2 import Environment, FileSystemLoader
    jinja2_env = Environment(loader=FileSystemLoader(project_path))

    debug = True
    error_template = None'''

    template_controller = '''\
    #!/usr/bin/env python
    # coding: utf-8
    
    import argparse
    import sys
    from giotto import initialize

    import config
    initialize_giotto(config)

    from manifest import manifest
    '''

    blank_application = '''from giotto.programs import GiottoProgram, ProgramManifest
    from giotto.views import BasicView

    manifest = ProgramManifest({
        '': GiottoProgram(
            model=[lambda: "hello world"],
            view=BasicView
        )
    })'''

    from giotto.demo import demo_application

    try:
        open('manifest.py', 'r')
    except IOError:
        # create a blank manifest file (if one doesn't already exist)
        f = open('manifest.py', 'w')
        if args.demo:
            f.write(demo_application)
        else:
            f.write(blank_application)

    try:
        open('config.py', 'r')
    except IOError:
        # create a blank config file (if one doesn't already exist)
        f = open('config.py', 'w')
        f.write(config_template)

    if controller == 'http':
        from giotto.controllers.http import http_execution_snippet
        filename = 'http_controller.py'
        f = open(filename, 'w')
        st = os.stat(filename)
        f.write(template_controller + http_execution_snippet)
        os.chmod(filename, st.st_mode | stat.S_IEXEC)

    if controller == 'irc':
        from giotto.controllers.irc_ import irc_execution_snippet
        filename = 'irc_controller.py'
        f = open(filename, 'w')
        f.write(template_controller + irc_execution_snippet)
        st = os.stat(filename)
        os.chmod(filename, st.st_mode | stat.S_IEXEC)

    if controller == 'cmd':
        from giotto.controllers.cmd import cmd_execution_snippet
        filename = 'cmd_controller.py'
        f = open(filename, 'w')
        f.write(template_controller + cmd_execution_snippet)
        st = os.stat(filename)
        os.chmod(filename, st.st_mode | stat.S_IEXEC)

    raise SystemExit()

f = "%s/%s_controller.py" % (os.getcwd(), subcommand)
process = subprocess.Popen([f] + sys.argv[2:])
try:
    process.wait()
except KeyboardInterrupt:
    pass




